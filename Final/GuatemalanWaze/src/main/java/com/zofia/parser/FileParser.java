
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parser;

import java_cup.runtime.Symbol;
import com.zofia.lexer.FileLexer;
import com.zofia.drivers.VertexDriver;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\015\000\002\010\002\000\002\004\006\000\002\005\005" +
    "\000\002\006\004\000\002\006\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\004\004\007\001\002\000\004\002\034\001" +
    "\002\000\004\002\000\001\002\000\004\006\013\001\002" +
    "\000\004\007\010\001\002\000\004\005\ufffe\001\002\000" +
    "\004\005\012\001\002\000\004\006\ufffd\001\002\000\004" +
    "\004\007\001\002\000\004\006\015\001\002\000\004\004" +
    "\017\001\002\000\004\006\024\001\002\000\006\010\022" +
    "\011\020\001\002\000\004\005\ufff8\001\002\000\004\005" +
    "\023\001\002\000\004\005\ufff9\001\002\000\010\002\ufffc" +
    "\004\ufffc\006\ufffc\001\002\000\004\004\017\001\002\000" +
    "\004\006\026\001\002\000\004\004\017\001\002\000\004" +
    "\006\030\001\002\000\004\004\017\001\002\000\006\002" +
    "\ufffa\004\007\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\010\002\003\003\004\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\013\001\001\000\002\001\001" +
    "\000\004\005\015\001\001\000\002\001\001\000\004\007" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\024\001\001\000" +
    "\002\001\001\000\004\005\026\001\001\000\002\001\001" +
    "\000\006\005\030\006\031\001\001\000\006\003\032\004" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private VertexDriver driver;
    private int id;

    public FileParser(FileLexer lexer) {
        super(lexer);
        this.driver = new VertexDriver();
        this.id = 1;
    }

    public void generalDriver(String name, double amount) {
        if(id == 1 || id == 2) {
            driver.addNames(name, id);
            id++;
        } else if(id >= 3 && id < 7) {
            driver.addAmount(amount, id);
            id++;
        } else {
            id = 1;
            generalDriver(name, amount);
        }
    }

    public VertexDriver getDriver() {
        return driver;
    }

    public void syntax_error(Symbol symbol) {
        /* Pendiente */
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FileParser$actions {
  private final FileParser parser;

  /** Constructor */
  CUP$FileParser$actions(FileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FileParser$do_action_part00000000(
    int                        CUP$FileParser$act_num,
    java_cup.runtime.lr_parser CUP$FileParser$parser,
    java.util.Stack            CUP$FileParser$stack,
    int                        CUP$FileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FileParser$result;

      /* select the action based on the action number */
      switch (CUP$FileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)).value;
		RESULT = start_val;
              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FileParser$parser.done_parsing();
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= structure 
            {
              Object RESULT =null;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // structure ::= place VERTICALBAR place VERTICALBAR amount VERTICALBAR amount VERTICALBAR amount VERTICALBAR last 
            {
              Object RESULT =null;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("structure",1, ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-10)), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FileParser$stack.peek()).value;
 generalDriver(p, 0); 
              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // place ::= LESSTHAN PLACE NT$0 GREATERTHAN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FileParser$stack.elementAt(CUP$FileParser$top-2)).value;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("place",2, ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-3)), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // amount ::= LESSTHAN type GREATERTHAN 
            {
              Object RESULT =null;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("amount",3, ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-2)), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // last ::= amount structure 
            {
              Object RESULT =null;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("last",4, ((java_cup.runtime.Symbol)CUP$FileParser$stack.elementAt(CUP$FileParser$top-1)), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // last ::= amount 
            {
              Object RESULT =null;

              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("last",4, ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$FileParser$stack.peek()).value;
		 generalDriver("", Double.valueOf(d)); 
              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$FileParser$stack.peek()).value;
		 generalDriver("", Double.valueOf(d)); 
              CUP$FileParser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FileParser$stack.peek()), RESULT);
            }
          return CUP$FileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FileParser$do_action(
    int                        CUP$FileParser$act_num,
    java_cup.runtime.lr_parser CUP$FileParser$parser,
    java.util.Stack            CUP$FileParser$stack,
    int                        CUP$FileParser$top)
    throws java.lang.Exception
    {
              return CUP$FileParser$do_action_part00000000(
                               CUP$FileParser$act_num,
                               CUP$FileParser$parser,
                               CUP$FileParser$stack,
                               CUP$FileParser$top);
    }
}

}
